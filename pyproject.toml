# ─────────────────────────────────────────────────────────────────────────────
# Project Metadata
# ─────────────────────────────────────────────────────────────────────────────
[project]
name = "keyrings.artifacts"
description = "Keyring backend, that automatically retrieves credentials for Azure Artifacts."
authors = [{ name = "Jens Lorrmann", email = "jslorrma@gmail.com" }]
maintainers = [{ name = "Jens Lorrmann", email = "jslorrma@gmail.com" }]
readme = "README.md"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
]
dynamic = ["version"]

# ─────────────────────────────────────────────────────────────────────────────
# Project Dependencies
# ─────────────────────────────────────────────────────────────────────────────
requires-python = ">=3.7"

dependencies = [
  "keyring>=16.0",
  "requests>=2.20.0",
  "azure-identity>=1.17.1",
  "keyrings.alt>=5.0.0",
  "pycryptodomex>=3.20.0",
  "setuptools>=70.0.0,<76",
]

[tool.pixi.feature.dev.dependencies]
pytest = ">=8.3.2,<9"
pytest-mock = ">=3.14.0,<4"
pytest-cov = ">=5.0.0,<6"
pytest-html = ">=4.1.1,<5"
ruff = ">=0.6.2,<0.7"
black = ">=24.8.0,<25"
ipykernel = ">=6.29.5,<7"

[tool.pixi.pypi-dependencies]
keyrings_artifacts = { path = ".", editable = true }

# ─────────────────────────────────────────────────────────────────────────────
# Project Entrypoints
# ─────────────────────────────────────────────────────────────────────────────

[project.entry-points."keyring.backends"]
artifacts = "keyrings_artifacts.artifacts:ArtifactsKeyringBackend"
crypt_file = "keyrings_artifacts.crypt_file:EncryptedKeyring_"

#
[project.scripts]
# This entry installs the keyring script, when the package is installed as command-line tool.
# Note: This project is a plugin for the keyring package and does not provide a command-line
# tool, but the keyring package does. This entry is required to make this package installable
# as a command-line tool.
keyring = "keyring.cli:main"

# ─────────────────────────────────────────────────────────────────────────────
# Build System Configuration
# ─────────────────────────────────────────────────────────────────────────────
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/keyrings_artifacts/_version.py"

# [tool.hatch.build]
# packages = ["src/keyrings_artifacts"]

# [tool.hatch.build.targets.wheel]
# packages = ["src/keyrings_artifacts", "keyrings_artifacts"]

# [tool.hatch.build.targets.sdist]
# packages = ["src/keyrings_artifacts", "keyrings_artifacts"]

# ─────────────────────────────────────────────────────────────────────────────
# Pixi Configuration
# ─────────────────────────────────────────────────────────────────────────────
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "win-64"]

[tool.pixi.environments]
dev = { features = ["dev"], solve-group = "default" }

[tool.pixi.tasks]
post-install = "pre-commit install"

[tool.pixi.feature.dev.tasks.test]
# Run tests with pytest and generate a coverage report in XML format
cmd = "pytest -s -v --cov"

[tool.pixi.feature.dev.tasks.test-reports]
# Run tests with pytest and generate a coverage report in XML format
cmd = "pytest -s -v --cov-report=xml:reports/coverage.xml --junitxml=reports/junit.xml --html=reports/report.html"

[tool.pixi.feature.dev.tasks.ruff-check]
# Format code using Ruff
cmd = "ruff check --fix --exit-non-zero-on-fix --force-exclude ./src"

[tool.pixi.feature.dev.tasks.format]
# Format code using Ruff
cmd = "ruff format --force-exclude ./src"

[tool.pixi.feature.dev.tasks.pre-commit]
# Run all pre-commit hooks
cmd = "pre-commit run --all-files"

[tool.pixi.feature.dev.tasks.bump-version]
# Bump the project version using Hatch
# Usage: pixi run -e dev bump-version [patch|minor|major],[dev]
cmd = "pixi exec hatch version $segment"

[tool.pixi.feature.dev.tasks.build-sdist]
# Build the source distribution (sdist) using Hatch
# Inputs: source files and pyproject.toml
# Outputs: tar.gz files in the dist directory
cmd = "pixi exec hatch build -t sdist"
inputs = ["src/**/*", "pyproject.toml"]
outputs = ["dist/*.tar.gz"]

[tool.pixi.feature.dev.tasks.build-wheel]
# Build the wheel distribution using Hatch
# Inputs: source files and pyproject.toml
# Outputs: wheel files in the dist directory
cmd = "pixi exec hatch build -t wheel"
inputs = ["src/**/*", "pyproject.toml"]
outputs = ["dist/*.whl"]

[tool.pixi.feature.dev.tasks.build]
# Build the wheel and ource distribution (sdist) distribution using Hatch
cmd = "pixi exec hatch build -t wheel -t sdist"
inputs = ["src/**/*", "pyproject.toml"]
outputs = ["dist/*.whl", "dist/*.tar.gz"]

[tool.pixi.feature.dev.tasks.recipe-v1]
# Generate a conda recipe using grayskull
# Usage: pixi run -e dev recipe
cmd = """pixi exec grayskull pypi --strict-conda-forge --use-v1-format keyrings.artifacts \
sed -i '' 's/\\${{ PYTHON }}/python/g' keyrings.artifacts/meta.yaml; \
sed -i '' 's/- keyrings.artifacts/- keyrings_artifacts/g' keyrings.artifacts/meta.yaml; \
sed -i '' '/- keyrings-alt >=5.0.0/d' keyrings.artifacts/meta.yaml
"""
cwd = "recipe"

[tool.pixi.feature.dev.tasks.recipe-v0]
# Generate a conda recipe using grayskull
# Usage: pixi run -e dev recipe
cmd = """pixi exec grayskull pypi --strict-conda-forge keyrings.artifacts; \
sed -i '' 's/\\${{ PYTHON }}/python/g' keyrings.artifacts/meta.yaml; \
sed -i '' 's/- keyrings.artifacts/- keyrings_artifacts/g' keyrings.artifacts/meta.yaml; \
sed -i '' '/- keyrings-alt >=5.0.0/d' keyrings.artifacts/meta.yaml; \
sed -i '' $'s/about:/about:\\\\n  home: https:\\/\\/github.com\\/jslorrma\\/keyrings.artifacts/' keyrings.artifacts/meta.yaml
"""
cwd = "recipe"

[tool.pixi.feature.dev.tasks.test-recipe]
# Test the conda recipe using conda-build
# Usage: pixi run -e dev test-recipe
cmd = """
pixi exec conda-build keyrings.artifacts \
&& pixi exec conda-build purge
"""
cwd = "recipe"

[tool.pixi.feature.dev.tasks.release]
# Release the project to PyPI using Hatch
# Usage: pixi run -e dev release
cmd = """version=$(pixi exec hatch version) \
&& pixi update \
&& git add pixi.lock pyproject.toml src/keyrings_artifacts/_version.py \
&& git commit -m "Release v$version" \
&& git push origin \
&& git tag -a v$version -m "Release v$version" \
&& git push origin v$version
"""

# ─────────────────────────────────────────────────────────────────────────────
# Code Formatting and Linting
# ─────────────────────────────────────────────────────────────────────────────
[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py310"
fix = true
src = ["src", "notebooks", "tests"]

[tool.ruff.format]
exclude = [
  "src/_version.py",
]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
pydocstyle.convention = "numpy"
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
  "I",   # isort
  "F",   # pyflakes
  "E",   # pycodestyle errors (formerly known as pep8)
  "W",   # pycodestyle warnings (formerly known as pep8)
  "PLC", # pylint conventions
  "PLE", # pylint errors
  "PLR", # pylint refactor
  "PLW", # pylint warnings
  "B",   # flake8 bugbear
  "PIE", # flake8 misc lints
  "ISC", # flake8 implicit string concatenation
  "TID", # flake8 tidy imports
  "TC",  # flake8 type-checking
  "ARG", # flake8 unused arguments
  "PTH", # flake8 use pathlib
  "RET", # flake8 return statements
  "SIM", # flake8 simplify
  "SLF", # flake8 self
  "C4",  # flake8 comprehensions
  "A",   # flake8 builtins
  "ANN", # flake8 annotations
  "N",  # flake8 naming
  "PGH", # pygrep-hooks
  "UP",  # pyupgrade
  "D",  # pydocstyle
  "RUF", # Ruff-specific rules
  "C90", # check McCabe complexity
]
unfixable = ["PLR"]
ignore = [
  ##
  # avoid conflicts with formatter:
  # - https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  ##
  # line tool long
  "E501",
  # Tab indentation
  "W191",
  # indentation with a non-multiple of 4 spaces
  "E111",
  # indentation with non-multiple of 4 spaces (comment)
  "E114",
  # docstring-tab-indentation
  "D206",
  # triple-single-quotes
  "D300",
  # over-indented
  "E117",
  # Checks for implicitly concatenated strings on a single line.
  "ISC001",
  ##
  # Rule exceptions to ignore too strict rules and confirm to the project's coding style
  ##
  # Prefer absolute imports over relative imports from parent modules
  "TID252",
  # zip  without "explicit". Only works with python >=3.10
  "B905",
  # Dynamically typed expressions (typing.Any) are disallowed
  "ANN401",
  # Missing return type for special method
  "ANN204",
  # Missing explicit return type
  "RET503",
  ##
  # Rule exceptions for docstrings
  ##
  # First line should end with a period
  "D400",
  # First line of docstring should be in imperative mood
  "D401",
  # First line should end with a period, question mark, or exclamation point
  "D415",
]
[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
  # skip docstring checks for Jupyter notebooks as code can also be documented
  # in markdown cells.
  "D",
  # Module level import not at top of file; skip for Jupyter notebooks to avoid
  # complaints about cell or section specific imports.
  "E402",
  # Useless expression; skip for Jupyter notebooks to avoid complaints about
  # expressions at the end of cells, not assigned to a variable, but used to
  # display output.
  "B018"
  ]
"tests/*" = [
  # Missing return type annotation
  "ANN201",
  # Unused functiion arguments
  "ARG001",
  # Missing docstring
  "D1",
]

# ─────────────────────────────────────────────────────────────────────────────
# Code Testing
# ─────────────────────────────────────────────────────────────────────────────
[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.coverage]
run.source = ["src/{{ project_name_snake_case }}"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]
