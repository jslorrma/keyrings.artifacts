name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: dev

      - name: Code linting with ruff check
        run: pixi run -e dev ruff-check

      - name: Code formatting with ruff format
        run: pixi run -e dev format

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: dev

      - name: Run tests
        run: pixi run -e dev test

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  version-check:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-metadata.outputs.changed }}
      new-version: ${{ steps.version-metadata.outputs.newVersion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get current version
        id: get-version
        run: |
          echo "current_version=$(grep -Po '(?<=^__version__ = ")[^"]*' src/keyrings_artifacts/_version.py)" >> $GITHUB_ENV

      - name: Get previous version
        id: get-previous-version
        run: |
          git fetch --tags
          echo "previous_version=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Compare versions
        id: version-metadata
        run: |
          if [ "$current_version" != "$previous_version" ]; then
              echo "::set-output name=changed::true"
              echo "::set-output name=newVersion::$current_version"
          else
              echo "::set-output name=changed::false"
          fi

  build:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.version-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: ci

      - name: Build package
        run: pixi run -e dev build-wheel

      - name: Publish to GitHub Packages
        run: |
          pixi run -e ci twine upload --repository github dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.CI_PACKAGE_TOKEN }}
